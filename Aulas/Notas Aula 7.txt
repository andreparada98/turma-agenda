Lifecycle Hookes: https://angular.io/guide/lifecycle-hooks#lifecycle-event-sequence


******************************************************************

Gerando componente com 'ng generate'

$ ng generate component components/property-binding

$ ng generate component components/event-binding


Binding -> {{variavel}}: também chamamos de interpolação (component -> view). Obs: O uso se faz como um valor de exibição da tag de HTML. Exemplos:
- <p>{{variavel}}</p>
- <h1>{{variavel}}</h1>
- <div>{{variavel}}</div>
- <a>{{variavel}}</a>

Site: https://angular.io/guide/property-binding
Property Binding -> [atributo]="": é uma forma de monitorar com o Angular propriedades de um elemento HTML (component -> view). Obs: O uso se faz no atributo/propridade da tag de HTML. Exemplos:
- <input [value]="rnd" />
- <img [src]="image" />

Site: https://angular.io/guide/event-binding
Event Binding -> (evento)="funcao()": é a forma como o usuário interage na tela (view) e o site vai compreender para executar algo (view -> component). Exemplos:
- <button (click)="alterarTexto()">Alterar Texto</button>
-- No component.ts tem a função 'alterarTexto'

******************************************************************

Interfaces

Uma interface é um arquivo de definição - variáveis/objetos/propriedades ou de funções
Quando determinamos o funcionamento de uma função, por exemplo, podemos desenhar a estrutura dela. Exemplo:
export interface Funcoes{
    calcularMetroQuadrado(largura: number, altura: number): number
    calcularIMC(peso: number, altura: number): number
}
Quando desenhamos uma tipagem de dados, podemos (e devemos) criar uma interface desses dados. Exemplo:
export interface Evento{
    descricao: string;
    data: Date;
    preco: number;
}

******************************************************************

Service

Uma Service (ou serviço) é um repositório de informações ou de configurações que recebida/declarada no constructor, onde 'aquilo' servirá para algo, tratando uma informação ou fazendo uma forma de tratar padronizado um comportamento.
O serviço é declarado no constructor para que quando o componente for criado, ele esteja pronto para receber e lida (seja de qual forma for) com os dados e configurações vinda da service.
Uma service não interage com o usuário. É um controle totalmente do sistema.

Vamos criar um serviço para simular uma chamada de API.

$ ng generate service services/topicos

Site: https://angular.io/api/core/Injectable

******************************************************************

Criando nosso projeto Angular de Eventos

1. Sair da pasta 'app-conceitos'
$ cd ..

2. Executar comando pra gerar o projeto Angular
$ ng new app-eventos --routing=true --style=scss --skip-tests=true
--routing=true: configura o projeto com o módulo de rotas
--style=scss: configura o projeto com o estilo de SCSS para CSS
--skip-tests=true: configura o projeto para não gerar arquivos de testes

3. Entrar na pasta do projeto
$ cd app-eventos

4. Instalação de ngx-bootstrap e o bootstrap no projeto e utilizaremos uma estrutura de menu exemplo: https://getbootstrap.com/docs/4.3/components/navbar/
$ npm i ngx-bootstrap bootstrap --save

5. Colocar arquivo de bootstrap no arquivo styles.scss
@import "~bootstrap/dist/css/bootstrap.min.css";

6. Vamos criar um módulo 'shared' para o projeto
$ ng generate module components/shared

7. Criar o componente de menu para o módulo de shared
$ ng generate component components/shared/menu

8. Vamos adicionar no AppModule em imports o SharedModule (para permitir que a aplicação use os componentes compartilhados) e o BrowserAnimationsModule (para ajudar na questão de animações que usaremos do próprio bootstrap)
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
-> import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
-> import { SharedModule } from './components/shared/shared.module';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    AppRoutingModule,
->     BrowserAnimationsModule,
    BrowserModule,
->     SharedModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

9. Vamos exportar o menu no SharedModule para ser acessivel na aplicação
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { MenuComponent } from './menu/menu.component';

@NgModule({
  declarations: [
    MenuComponent
  ],
  imports: [
    CommonModule
  ],
->  exports: [
->    MenuComponent
->  ]
})
export class SharedModule { }

10. Vamos usar a estrutura modelo de menu exemplo do bootstrap (arquivo menu.html)

11. Vamos aplicar 2 módulos do ngx-bootstrap que usaremos: collapse e o dropdown. Colocaremos no imports do SharedModule
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { MenuComponent } from './menu/menu.component';
->import { CollapseModule } from 'ngx-bootstrap/collapse'
->import { BsDropdownModule } from 'ngx-bootstrap/dropdown';

@NgModule({
  declarations: [
    MenuComponent
  ],
  imports: [
    CommonModule,
->    CollapseModule.forRoot(),
->    BsDropdownModule.forRoot()
  ],
  exports: [
    MenuComponent
  ]
})
export class SharedModule { }

12. Vamos adicionar a variável/propriedade 'isCollapsed' no component.ts do menu
isCollapsed: boolean = true;