Lifecycle Hooks: https://angular.io/guide/lifecycle-hooks#lifecycle-event-sequence


******************************************************************

Gerando componente com 'ng generate'

$ ng generate component components/property-binding

$ ng generate component components/event-binding


Binding -> {{variavel}}: também chamamos de interpolação (component -> view). Obs: O uso se faz como um valor de exibição da tag de HTML. Exemplos:
- <p>{{variavel}}</p>
- <h1>{{variavel}}</h1>
- <div>{{variavel}}</div>
- <a>{{variavel}}</a>

Site: https://angular.io/guide/property-binding
Property Binding -> [atributo]="": é uma forma de monitorar com o Angular propriedades de um elemento HTML (component -> view). Obs: O uso se faz no atributo/propridade da tag de HTML. Exemplos:
- <input [value]="rnd" />
- <img [src]="image" />

Site: https://angular.io/guide/event-binding
Event Binding -> (evento)="funcao()": é a forma como o usuário interage na tela (view) e o site vai compreender para executar algo (view -> component). Exemplos:
- <button (click)="alterarTexto()">Alterar Texto</button>
-- No component.ts tem a função 'alterarTexto'

******************************************************************

Interfaces

Uma interface é um arquivo de definição - variáveis/objetos/propriedades ou de funções
Quando determinamos o funcionamento de uma função, por exemplo, podemos desenhar a estrutura dela. Exemplo:
export interface Funcoes{
    calcularMetroQuadrado(largura: number, altura: number): number
    calcularIMC(peso: number, altura: number): number
}
Quando desenhamos uma tipagem de dados, podemos (e devemos) criar uma interface desses dados. Exemplo:
export interface Evento{
    descricao: string;
    data: Date;
    preco: number;
}

******************************************************************

Service

Uma Service (ou serviço) é um repositório de informações ou de configurações que recebida/declarada no constructor, onde 'aquilo' servirá para algo, tratando uma informação ou fazendo uma forma de tratar padronizado um comportamento.
O serviço é declarado no constructor para que quando o componente for criado, ele esteja pronto para receber e lida (seja de qual forma for) com os dados e configurações vinda da service.
Uma service não interage com o usuário. É um controle totalmente do sistema.

Vamos criar um serviço para simular uma chamada de API.

$ ng generate service services/topicos

Site: https://angular.io/api/core/Injectable

******************************************************************

Criando nosso projeto Angular de Eventos

1. Sair da pasta 'app-conceitos'
$ cd ..

2. Executar comando pra gerar o projeto Angular
$ ng new app-eventos --routing=true --style=scss --skip-tests=true
--routing=true: configura o projeto com o módulo de rotas
--style=scss: configura o projeto com o estilo de SCSS para CSS
--skip-tests=true: configura o projeto para não gerar arquivos de testes

3. Entrar na pasta do projeto
$ cd app-eventos

4. Instalação de ngx-bootstrap e o bootstrap no projeto e utilizaremos uma estrutura de menu exemplo: https://getbootstrap.com/docs/4.3/components/navbar/
$ npm i ngx-bootstrap bootstrap --save

5. Colocar arquivo de bootstrap no arquivo styles.scss
@import "~bootstrap/dist/css/bootstrap.min.css";

6. Vamos criar um módulo 'shared' para o projeto
$ ng generate module components/shared

7. Criar o componente de menu para o módulo de shared
$ ng generate component components/shared/menu

8. Vamos adicionar no AppModule em imports o SharedModule (para permitir que a aplicação use os componentes compartilhados) e o BrowserAnimationsModule (para ajudar na questão de animações que usaremos do próprio bootstrap)
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
-> import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
-> import { SharedModule } from './components/shared/shared.module';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    AppRoutingModule,
->     BrowserAnimationsModule,
    BrowserModule,
->     SharedModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

9. Vamos exportar o menu no SharedModule para ser acessivel na aplicação
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { MenuComponent } from './menu/menu.component';

@NgModule({
  declarations: [
    MenuComponent
  ],
  imports: [
    CommonModule
  ],
->  exports: [
->    MenuComponent
->  ]
})
export class SharedModule { }

10. Vamos usar a estrutura modelo de menu exemplo do bootstrap (arquivo menu.html)

11. Vamos aplicar 2 módulos do ngx-bootstrap que usaremos: collapse e o dropdown. Colocaremos no imports do SharedModule
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { MenuComponent } from './menu/menu.component';
->import { CollapseModule } from 'ngx-bootstrap/collapse'
->import { BsDropdownModule } from 'ngx-bootstrap/dropdown';

@NgModule({
  declarations: [
    MenuComponent
  ],
  imports: [
    CommonModule,
->    CollapseModule.forRoot(),
->    BsDropdownModule.forRoot()
  ],
  exports: [
    MenuComponent
  ]
})
export class SharedModule { }

12. Vamos adicionar a variável/propriedade 'isCollapsed' no component.ts do menu
isCollapsed: boolean = true;

13. No HTML do app.component.html vamos deixar somente:
<app-menu></app-menu>
<router-outlet></router-outlet>

Acima já temos um projeto funcional com um menu sendo executado, e agora vamos para novos passos para criar os componentes que serão renderizados na tela por meio de rotas

Páginas:
- Inicial/Home
- Lista de Eventos
- Cadastro de Eventos
- Não Encontrado (404)

Os comandos que iremos executar, são:
$ ng generate component components/pages/home
$ ng generate component components/pages/events/list
$ ng generate component components/pages/events/create
$ ng generate component components/pages/not-found

Após criar os componentes, vamos modificar o menu para configurar as rotas que iremos criar. Usamos o 'routerLink' que é um atributo/propriedade que a tag de HTML <a> utilizará no lugar do 'href'
A escrita por ser uma propridade monitorada, é dentro de []
-> [routerLink]="['/']"
-> [routerLink]="['/home']"
-> [routerLink]="['/eventos/listar']"
-> [routerLink]="['/eventos/cadastrar']"

Nós configuramos as rotas no app-routing.module.ts na constante que já vem vazia.
A ordem de rotas para serem criadas vem da primeira sendo a rota '/' vazia de acesso e a última rota é a de 'not found' (que é representada por **).
As rotas não precisam de '/' no nome delas.
As duas propriedades no objeto da rota passado são path e component.
Exemplo:
const routes: Routes = [
	{
		path: "",
		component: HomeComponent
	},
	{
		path: 'home',
		component: HomeComponent
	},
	{
		path: "eventos",
		component: EventsListComponent
	},
	{
		path: "eventos/cadastrar",
		component: EventCreateComponent
	},
	{
		path: "**",
		component: NotFoundComponent
	}
];

Após configurarmos as rotas, precisamos usar como 'imports' no módulo Shared o RouterModule, para o 'routerLink' funcionar corretamente.

-> import { RouterModule } from '@angular/router';
@NgModule({
	declarations: [
		MenuComponent
	],
	imports: [
		CommonModule,
		CollapseModule.forRoot(),
		BsDropdownModule.forRoot(),
->		RouterModule
	],
	exports: [
		MenuComponent
	]
})

Criamos uma tabela para preencher os eventos na lista de eventos
<table class="table table-striped">
	<thead>
		<tr>
			<th>
				Descrição
			</th>
			<th>
				Data
			</th>
			<th>
				Valor
			</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>
				<%=evento.descricao%>
			</td>
			<td>
				<%=moment(evento.data).utc().format("DD /MM/yyyy")%>
			</td>
			<td>R$ <%=evento.preco%>
			</td>
		</tr>
	</tbody>
</table>

Vamos criar um serviço para acessar/usar o webservice (Para isso rodem o apiEventos da pasta 07)

$ ng generate service services/webservice

Para acessar um webservice que vamos criar, precisamos realizar os seguintes passos:
1. Adicionar o módulo HttpClientModule no arquivo app.module.ts
import { HttpClientModule } from '@angular/common/http';
@NgModule({
	declarations: [
		AppComponent,
		HomeComponent,
		EventsListComponent,
		EventCreateComponent,
		NotFoundComponent
	],
	imports: [
		AppRoutingModule,
		BrowserAnimationsModule,
		BrowserModule,
->		HttpClientModule,
		SharedModule
	],
	providers: [],
	bootstrap: [AppComponent]
})

2. No constructor da service criada, referenciaremos o componente HttpClient
-> import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
	providedIn: 'root'
})
export class WebserviceService {
	urlEventos: string = "http://localhost:3200/eventos";

->	constructor(private http: HttpClient) { }
}

3. Criar uma estrutura para definir os dados de Eventos para utilizar nas chamadas de webservice, isso significa que criaremos uma Interface para representar o objeto de Evento com suas propriedades a ser manipulado
$ ng generate interface interfaces/evento

export interface Evento {
	descricao: string;
	data: string;
	preco: number;
}

Após preparar as possibilidades para uso do Http (módulo e constructor), vamos criar a função de pegar eventos
Declaramos como 'private' o http para disponibilizar o uso desse serviço para a classe WebserviceService, dessa maneira podendo realizar requisições (get, post, put...)
Para criarmos nosso método para listar eventos, criamos a função do tipo Observable
Quando pensamos em um webservice e em requisições, pensamos em Promise; e no Angular temos algo que funciona da mesma maneira, mas chamamos de Observable
Quando criamos a função do tipo Observable, ela automaticamente aguarda um retorno, e o retorno será diretamente a chamada da URL da API que criamos que retornará a listagem de eventos
O Observable utiliza o modelo da Interface de Evento para aguardar um retorno exato de lista de eventos baseado na definição feita na interface, o que define que será uma lita são os [] na frente da palavra 'Evento'
Como Observable espera um retorno, declaramos dentro da função o return já chamando fiz http uma requisição get com a URL de Eventos, e esperamos que essa requisição retorne também uma lista de Eventos

Chamamos no constructor da lista o serviço de webservice que criamos para realizar a chamada da URL de get eventos criada com a função do tipo Observable
Vamos executar a função no ngOnInit que é a inicialização do componente
Após chamar a função de getEventos criada como Observable, precisamos nos inscrever no Observable pois ele (o Observable) precisa dessa inscrição para retornar o que estamos aguardando
E então usamos uma arrow function como callback para pegar a resposta da URL (no caso a lista de eventos) e populamos a variável/propriedade eventos do componente com a resposta da requisição